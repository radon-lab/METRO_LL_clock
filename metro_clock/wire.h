uint8_t _bytes_available = 0; //переменная хранит количество запрошенных и непрочитанных байт
boolean _address_error = 0; //Флаг для отслеживания ошибки при передаче адреса
boolean _data_error = 0; //Флаг для отслеживания ошибки при передаче данных
boolean _stopWire = 1; //остановка или перезапуск шины после чтения последнего байта

void WireRequestFrom(uint8_t address, uint8_t length, boolean stop = 1); //запрос пакета данных
uint8_t WireEndTransmission(boolean stop = 1); //завершение передачи

//--------------------------------------Инициализация Wire------------------------------------------
void WireInit(void) //инициализация Wire
{ 
  PORTC |= 0b00110000; //подтяжка SDA и SCL
  DDRC &= 0b11001111; //устанавливаем SDA и SCL как входы
  TWBR = 72; //устанавливаем скорость 100kHz
  TWSR = 0; //устанавливаем делитель 1, статус 0;
}
//--------------------------------------Запуск шины Wire------------------------------------------
void WireStart(void) //запуск шины Wire
{ 
  TWCR = _BV(TWSTA) | _BV(TWEN) | _BV(TWINT); //включаем Wire, отправляем команду старт и устанавливаем флаг выполнить задачу
  while (!(TWCR & _BV(TWINT))); //ожидание завершения
}
//--------------------------------------Остановка шины Wire------------------------------------------
void WireStop(void) //остановка шины Wire
{ 
  TWCR = _BV(TWSTO) | _BV(TWEN) | _BV(TWINT); //включаем Wire, отправляем команду стоп и устанавливаем флаг выполнить задачу
}
//--------------------------------------Отправка байта------------------------------------------
void WireWrite(uint8_t data) //отправка байта
{ 
  TWDR = data; //записать данные в data регистр
  TWCR = _BV(TWEN) | _BV(TWINT); //запустить передачу
  while (!(TWCR & _BV(TWINT))); //дождаться окончания
  uint8_t _bus_status = TWSR & 0xF8; //чтение статуса шины
  if (_bus_status == 0x20) _address_error = 1; //если нет ответа при передаче адреса
  if (_bus_status == 0x30) _data_error = 1; //если нет ответа при передаче данных
}
//--------------------------------------Чтение запрошенного байта------------------------------------------
uint8_t WireRead(void) //чтение запрошенного байта
{ 
  if (_bytes_available > 0) { //если байт не последний
    _bytes_available--; //уменьшаем значение доступных байт
    TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWEA); //запустить чтение шины с подтверждением ACK
    while (!(TWCR & _BV(TWINT))); //дождаться окончания приема данных
    return TWDR; //вернуть принятые данные , это содержимое data - регистра
  }
  TWCR = _BV(TWEN) | _BV(TWINT); //запустить чтение шины без подтверждения NACK
  while (!(TWCR & _BV(TWINT))); //дождаться окончания приема данных
  if (_stopWire) WireStop(); //если стоп, отпустить шину
  else WireStart(); //иначе перезапуск
  return TWDR; //вернуть принятый байт
}
//--------------------------------------Запуск передачи------------------------------------------
void WireBeginTransmission(uint8_t address) //запуск передачи
{
  WireStart(); //старт шины wire
  WireWrite(address << 1); //отправка устройству адреса с битом write
}
//--------------------------------------Завершение передачи------------------------------------------
uint8_t WireEndTransmission(boolean stop) //завершение передачи
{ 
  if (stop) WireStop(); //если задано стоп, отпустить шину
  else WireStart(); //иначе перезапуск
  if (_address_error) { //если нет ответа при передаче адреса
    _address_error = _data_error = 0; //сбрасываем оба флага
    return 2; //возвращаем 2
  }
  if (_data_error) { //если нет ответа при передаче данных
    _address_error = _data_error = 0; //сбрасываем оба флага
    return 3; //возвращаем 2
  } 
  return 0; //если ошибок нет, возвращаем 0
}
//--------------------------------------Запрос пакета данных------------------------------------------
void WireRequestFrom(uint8_t address, uint8_t length, boolean stop) //запрос пакета данных
{ 
  _stopWire = stop; //stop или restart после чтения последнего байта
  _bytes_available = length; //записать в переменную количество запрошенных байт
  WireStart(); //начать работу на шине
  WireWrite((address << 1) | 0x1); //отправка устройству адреса с битом read
}
